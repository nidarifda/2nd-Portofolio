(function(a) {
  var e = [],
    t = {
      options: {
        prependExistingHelpBlock: false,
        sniffHtml: true,
        preventSubmit: true,
        submitError: false,
        submitSuccess: false,
        semanticallyStrict: false,
        autoAdd: { helpBlocks: true },
        filter: function() { return true; }
      },
      methods: {
        init: function(o) {
          var r = a.extend(true, {}, t);
          r.options = a.extend(true, r.options, o);

          // Form submit handler
          var l = a.unique(this.map(function() {
            return a(this).parents("form")[0];
          }).toArray());
          a(l).bind("submit", function(e) {
            var t = a(this),
              i = 0,
              n = t.find("input,textarea,select")
                    .not("[type=submit],[type=image]")
                    .filter(r.options.filter);
            n.trigger("submit.validation").trigger("validationLostFocus.validation");

            n.each(function(e, t) {
              var n = a(t).parents(".control-group").first();
              if (n.hasClass("warning")) {
                n.removeClass("warning").addClass("error");
                i++;
              }
            });

            n.trigger("validationLostFocus.validation");

            if (i) {
              if (r.options.preventSubmit) e.preventDefault();
              t.addClass("error");
              if (a.isFunction(r.options.submitError)) {
                r.options.submitError(t, e, n.jqBootstrapValidation("collectErrors", true));
              }
            } else {
              t.removeClass("error");
              if (a.isFunction(r.options.submitSuccess)) {
                r.options.submitSuccess(t, e);
              }
            }
          });

          // Validation initialization
          this.each(function() {
            var t = a(this),
              o = t.parents(".control-group").first(),
              l = o.find(".help-block").first(),
              s = t.parents("form").first(),
              d = [];

            // Add help-block dynamically if required
            if (!l.length && r.options.autoAdd && r.options.autoAdd.helpBlocks) {
              l = a('<div class="help-block" />');
              o.find(".controls").append(l);
              e.push(l[0]);
            }

            // Sniffing HTML attributes for validation
            if (r.options.sniffHtml) {
              var c = "";
              if (void 0 !== t.attr("pattern")) {
                c = "Not in the expected format<!-- data-validation-pattern-message to override -->";
                if (t.data("validationPatternMessage")) c = t.data("validationPatternMessage");
                t.data("validationPatternMessage", c);
                t.data("validationPatternRegex", t.attr("pattern"));
              }

              // Max, Min, Max Length, Min Length validation
              if (void 0 !== t.attr("max") || void 0 !== t.attr("aria-valuemax")) {
                var v = void 0 !== t.attr("max") ? t.attr("max") : t.attr("aria-valuemax");
                c = "Too high: Maximum of '" + v + "'<!-- data-validation-max-message to override -->";
                if (t.data("validationMaxMessage")) c = t.data("validationMaxMessage");
                t.data("validationMaxMessage", c);
                t.data("validationMaxMax", v);
              }
              if (void 0 !== t.attr("min") || void 0 !== t.attr("aria-valuemin")) {
                var u = void 0 !== t.attr("min") ? t.attr("min") : t.attr("aria-valuemin");
                c = "Too low: Minimum of '" + u + "'<!-- data-validation-min-message to override -->";
                if (t.data("validationMinMessage")) c = t.data("validationMinMessage");
                t.data("validationMinMessage", c);
                t.data("validationMinMin", u);
              }
              if (void 0 !== t.attr("maxlength")) {
                c = "Too long: Maximum of '" + t.attr("maxlength") + "' characters<!-- data-validation-maxlength-message to override -->";
                if (t.data("validationMaxlengthMessage")) c = t.data("validationMaxlengthMessage");
                t.data("validationMaxlengthMessage", c);
                t.data("validationMaxlengthMaxlength", t.attr("maxlength"));
              }
              if (void 0 !== t.attr("minlength")) {
                c = "Too short: Minimum of '" + t.attr("minlength") + "' characters<!-- data-validation-minlength-message to override -->";
                if (t.data("validationMinlengthMessage")) c = t.data("validationMinlengthMessage");
                t.data("validationMinlengthMessage", c);
                t.data("validationMinlengthMinlength", t.attr("minlength"));
              }

              // Required field validation
              if (void 0 === t.attr("required") && void 0 === t.attr("aria-required")) {
                c = "This field is required<!-- data-validation-required-message to override -->";
                t.data("validationRequiredMessage", c);
              }

              // Email and Number type validation
              if (void 0 !== t.attr("type") && "email" === t.attr("type").toLowerCase()) {
                c = "Not a valid email address<!-- data-validator-validemail-message to override -->";
                if (t.data("validationValidemailMessage")) c = t.data("validationValidemailMessage");
                t.data("validationValidemailMessage", c);
              }
            }

            // Gather validation types
            var m = [];
            t.data("validation") && (m = t.data("validation").split(","));
            a.each(t.data(), function(a, e) {
              var t = a.replace(/([A-Z])/g, ",$1").split(",");
              if ("validation" === t[0] && t[1]) m.push(t[1]);
            });

            var h = {},
              g = [];
            a.each(m, function(e, n) {
              if (r.builtInValidators[n.toLowerCase()]) {
                var o = r.builtInValidators[n.toLowerCase()];
                if ("shortcut" === o.type.toLowerCase()) {
                  a.each(o.shortcut.split(","), function(a, e) {
                    g.push(e);
                    m.push(e);
                  });
                }
              }
            });

            // Loop for validator setup
            var f = {};
            a.each(m, function(e, n) {
              var o = t.data("validation" + n + "Message"),
                l = void 0 !== o;
              if (!l) {
                o = "'" + n + "' validation failed<!-- Add attribute 'data-validation-" + n.toLowerCase() + "-message' to input to change this message -->";
              }
              a.each(r.validatorTypes, function(e, r) {
                if (void 0 === f[e]) f[e] = [];
                var s = r.validate(t, n);
                if (s) f[e].push({ name: r.name, message: o });
              });
            });

            // Validation error messages
            t.bind("validation.validation", function(e, i) {
              var o = [];
              a.each(f, function(e, n) {
                o.push(n.message);
              });
              l.html("<ul role='alert'><li>" + o.join("</li><li>") + "</li></ul>");
            });
          });
        },

        destroy: function() {
          return this.each(function() {
            var t = a(this),
              o = t.parents(".control-group").first(),
              l = o.find(".help-block").first();
            t.unbind(".validation");
            l.html(l.data("original-contents"));
            o.attr("class", o.data("original-classes"));
            t.attr("aria-invalid", t.data("original-aria-invalid"));
            l.attr("role", t.data("original-role"));
            e.indexOf(l[0]) > -1 && l.remove();
          });
        },

        collectErrors: function(e) {
          var t = {};
          return this.each(function() {
            var n = a(this),
              o = n.attr("name"),
              r = n.triggerHandler("validation.validation", { includeEmpty: true });
            t[o] = a.extend(true, r, t[o]);
          }), a.each(t, function(a, e) {
            0 === e.length && delete t[a];
          }), t;
        },

        hasErrors: function() {
          var e = [];
          return this.each(function(t, i) {
            e = e.concat(a(i).triggerHandler("getValidators.validation") ? a(i).triggerHandler("validation.validation", { submitting: true }) : []);
          }), e.length > 0;
        },

        override: function(e) {
          t = a.extend(true, t, e);
        }
      },

      builtInValidators: {
        required: { message: "This field is required" },
        email: { message: "Not a valid email address" },
        number: { message: "Not a valid number" }
      },

      validatorTypes: {
        callback: { name: "callback", validate: function(a, e) { return true; } },
        ajax: { name: "ajax", validate: function(a, e) { return true; } }
      }
    };

  a.fn.extend(t.methods);
})(jQuery);
